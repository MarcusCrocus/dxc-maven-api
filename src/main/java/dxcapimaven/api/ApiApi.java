/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package dxcapimaven.api;

import dxcapimaven.model.Client;
import dxcapimaven.model.GetApiClientClientId200Response;
import dxcapimaven.model.GetApiClients201Response;
import dxcapimaven.model.GetApiClients400Response;
import dxcapimaven.model.GetApiClients401Response;
import dxcapimaven.model.GetApiClients403Response;
import dxcapimaven.model.GetApiClients404Response;
import dxcapimaven.model.GetApiClients500Response;
import dxcapimaven.model.PostApiClients201Response;
import dxcapimaven.model.PostApiClientsClientId201Response;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-14T10:41:44.990513500+01:00[Europe/Madrid]")
@Validated
@Tag(name = "clientDeleteById", description = "the clientDeleteById API")
public interface ApiApi {

    default ApiApiDelegate getDelegate() {
        return new ApiApiDelegate() {};
    }

    /**
     * DELETE /api/clients/{client-id} : Delete Customer by ID
     * will delet costumer by ID
     *
     * @param clientIdPathParam 13 (required)
     * @param clientId client_id (required)
     * @return No Content (status code 204)
     *         or Example response (status code 400)
     *         or Example response (status code 401)
     *         or Example response (status code 403)
     *         or Example response (status code 404)
     *         or Example response (status code 500)
     */
    @Operation(
        operationId = "deleteApiClientClientId",
        summary = "Delete Customer by ID",
        description = "will delet costumer by ID",
        tags = { "clientDeleteById" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "400", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients400Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients400Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients400Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients401Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients401Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients401Response.class))
            }),
            @ApiResponse(responseCode = "403", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients403Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients403Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients403Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients404Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients404Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients404Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients500Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients500Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients500Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/clients/{client-id}",
        produces = { "application/json", "application/xml", "multipart/form-data" }
    )
    
    default ResponseEntity<Void> deleteApiClientClientId(
        @NotNull @Min(1) @Max(1000) @Parameter(name = "ClientIdPathParam", description = "13", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "ClientIdPathParam", required = true, defaultValue = "7") Integer clientIdPathParam,
        @Parameter(name = "client-id", description = "client_id", required = true, in = ParameterIn.PATH) @PathVariable("client-id") Integer clientId
    ) {
        return getDelegate().deleteApiClientClientId(clientIdPathParam, clientId);
    }


    /**
     * GET /api/clients/{client-id} : Get Customer by ID
     * get costumer by ID
     *
     * @param clientIdPathParam 13 (required)
     * @param clientId client_id (required)
     * @return OK (status code 200)
     *         or Example response (status code 400)
     *         or Example response (status code 401)
     *         or Example response (status code 403)
     *         or Example response (status code 404)
     *         or Example response (status code 500)
     */
    @Operation(
        operationId = "getApiClientClientId",
        summary = "Get Customer by ID",
        description = "get costumer by ID",
        tags = { "clientGetById" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClientClientId200Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClientClientId200Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClientClientId200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients400Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients400Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients400Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients401Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients401Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients401Response.class))
            }),
            @ApiResponse(responseCode = "403", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients403Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients403Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients403Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients404Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients404Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients404Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients500Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients500Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients500Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/clients/{client-id}",
        produces = { "application/json", "application/xml", "multipart/form-data" }
    )
    
    default ResponseEntity<GetApiClientClientId200Response> getApiClientClientId(
        @NotNull @Min(1) @Max(1000) @Parameter(name = "ClientIdPathParam", description = "13", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "ClientIdPathParam", required = true, defaultValue = "7") Integer clientIdPathParam,
        @Parameter(name = "client-id", description = "client_id", required = true, in = ParameterIn.PATH) @PathVariable("client-id") Integer clientId
    ) {
        return getDelegate().getApiClientClientId(clientIdPathParam, clientId);
    }


    /**
     * GET /api/clients : Get of Customers List
     * get list of existed clients
     *
     * @param limitParam 100 (optional, default to 10)
     * @param offsetParam 10 (optional, default to 10)
     * @param sortBy 2 (optional)
     * @return Created (status code 201)
     *         or Example response (status code 400)
     *         or Example response (status code 401)
     *         or Example response (status code 403)
     *         or Example response (status code 404)
     *         or Example response (status code 500)
     */
    @Operation(
        operationId = "getApiClients",
        summary = "Get of Customers List",
        description = "get list of existed clients",
        tags = { "clientGetAll" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients201Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients201Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients201Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients400Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients400Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients400Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients401Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients401Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients401Response.class))
            }),
            @ApiResponse(responseCode = "403", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients403Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients403Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients403Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients404Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients404Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients404Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients500Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients500Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients500Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/clients",
        produces = { "application/json", "application/xml", "multipart/form-data" }
    )
    
    default ResponseEntity<GetApiClients201Response> getApiClients(
        @Min(0) @Max(100) @Parameter(name = "LimitParam", description = "100", in = ParameterIn.QUERY) @Valid @RequestParam(value = "LimitParam", required = false, defaultValue = "10") Integer limitParam,
        @Min(1) @Max(100) @Parameter(name = "OffsetParam", description = "10", in = ParameterIn.QUERY) @Valid @RequestParam(value = "OffsetParam", required = false, defaultValue = "10") Integer offsetParam,
        @Parameter(name = "SortBy", description = "2", in = ParameterIn.QUERY) @Valid @RequestParam(value = "SortBy", required = false) Integer sortBy
    ) {
        return getDelegate().getApiClients(limitParam, offsetParam, sortBy);
    }


    /**
     * POST /api/clients : 
     * Method will post array of clients objects
     *
     * @param client Requestin array of Client objects (optional)
     * @return Created (status code 201)
     *         or Example response (status code 400)
     *         or Example response (status code 401)
     *         or Example response (status code 403)
     *         or Example response (status code 500)
     */
    @Operation(
        operationId = "postApiClients",
        summary = "",
        description = "Method will post array of clients objects",
        tags = { "clientPostAll" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostApiClients201Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = PostApiClients201Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = PostApiClients201Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients400Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients400Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients400Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients401Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients401Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients401Response.class))
            }),
            @ApiResponse(responseCode = "403", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients403Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients403Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients403Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients500Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients500Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients500Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/clients",
        produces = { "application/json", "application/xml", "multipart/form-data" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PostApiClients201Response> postApiClients(
        @Parameter(name = "Client", description = "Requestin array of Client objects") @Valid @RequestBody(required = false) List<Client> client
    ) {
        return getDelegate().postApiClients(client);
    }


    /**
     * POST /api/clients/{client-id} : 
     * will post the data of client
     *
     * @param clientIdPathParam 13 (required)
     * @param clientId client_id (required)
     * @param body Requestin Object of Client (optional)
     * @return Created (status code 201)
     *         or Example response (status code 400)
     *         or Example response (status code 401)
     *         or Example response (status code 403)
     *         or Example response (status code 500)
     */
    @Operation(
        operationId = "postApiClientsClientId",
        summary = "",
        description = "will post the data of client",
        tags = { "clientPostById" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostApiClientsClientId201Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = PostApiClientsClientId201Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = PostApiClientsClientId201Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients400Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients400Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients400Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients401Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients401Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients401Response.class))
            }),
            @ApiResponse(responseCode = "403", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients403Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients403Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients403Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApiClients500Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = GetApiClients500Response.class)),
                @Content(mediaType = "multipart/form-data", schema = @Schema(implementation = GetApiClients500Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/clients/{client-id}",
        produces = { "application/json", "application/xml", "multipart/form-data" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PostApiClientsClientId201Response> postApiClientsClientId(
        @NotNull @Min(1) @Max(1000) @Parameter(name = "ClientIdPathParam", description = "13", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "ClientIdPathParam", required = true, defaultValue = "7") Integer clientIdPathParam,
        @Parameter(name = "client-id", description = "client_id", required = true, in = ParameterIn.PATH) @PathVariable("client-id") Integer clientId,
        @Parameter(name = "body", description = "Requestin Object of Client") @Valid @RequestBody(required = false) Client body
    ) {
        return getDelegate().postApiClientsClientId(clientIdPathParam, clientId, body);
    }

}
