openapi: 3.0.0
x-stoplight:
  id: 22m9lu1hzelq6
info:
  title: api-test
  version: '1.0'
  description: 'This api will get, put array of Customers and get put modificate and replece exact costumer'
  contact:
    name: DXC
    email: marcus.zelenskyy@dxc.com
servers:
  - url: 'http://localhost:3000'
    description: local sever
tags:
  - name: client.read
    description: Return list of clients
paths:
  /api/clients:
    get:
      summary: Get of Customers List
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ClientResponse'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      operationId: get-api-clients
      description: get list of existed clients
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - $ref: '#/components/parameters/SortBy'
      tags:
        - clientGetAll
    parameters: []
    post:
      summary: ''
      operationId: post-api-clients
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ClientResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ClientRequest'
        description: Requestin array of Client objects
      description: Method will post array of clients objects
      tags:
        - clientPostAll
  '/api/clients/{client-id}':
    parameters:
      - name: ClientIdPathParam
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          format: int32
          default: 7
        description: '13'
        required: true
      - schema:
          type: integer
        name: client-id
        in: path
        required: true
        description: client_id
    delete:
      summary: Delete Customer by ID
      operationId: delete-api-client-clientId
      description: will delet costumer by ID
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      tags:
        - clientDeleteById
      parameters: []
    get:
      summary: Get Customer by ID
      operationId: get-api-client-clientId
      description: get costumer by ID
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  data:
                    $ref: '#/components/schemas/ClientResponse'
              examples: {}
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      tags:
        - clientGetById
    post:
      summary: ''
      operationId: post-api-clients-client-id
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ClientResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      description: will post the data of client
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRequest'
        description: Requestin Object of Client
      tags:
        - clientPostById
components:
  schemas:
    Client:
      title: Client
      x-stoplight:
        id: us60ri14stj7g
      description: client
      x-examples: {}
      type: object
      x-tags:
        - clientModel
      properties:
        clientId:
          type: integer
          minimum: 0
          readOnly: true
        name:
          type: string
          minLength: 1
        surname:
          type: string
          minLength: 1
          maxLength: 20
        isClient:
          type: boolean
          default: false
        age:
          type: integer
          x-stoplight:
            id: gqxo5pipx1xwc
          format: int32
          minimum: 0
      required:
        - clientId
        - surname
    ClientResponse:
      $ref: '#/components/schemas/Client'
    Pagination:
      title: Pagination
      x-stoplight:
        id: c0g7bav9bgdhl
      type: object
      properties:
        offset:
          type: integer
          x-stoplight:
            id: r6w3wcn5m5duj
          minimum: 0
          format: int32
        limit:
          type: integer
          x-stoplight:
            id: rntfw5i72qjrd
          default: 10
          format: int32
          minimum: 0
        page:
          type: integer
          x-stoplight:
            id: t47urnq61o40x
          minimum: 0
          format: int32
        totalPages:
          type: integer
          x-stoplight:
            id: bg6io6celgrdw
          format: int32
          minimum: 0
        totalElements:
          type: integer
          x-stoplight:
            id: ze3g4wa5z9qqx
          format: int32
          minimum: 0
        links:
          type: object
          x-stoplight:
            id: nd74f1rcku5rs
      x-examples: {}
      x-tags:
        - paginationModel
      description: pagination model
    ClientRequest:
      $ref: '#/components/schemas/Client'
  responses:
    400BadRequest:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: array
                items:
                  type: object
                  properties:
                    alias:
                      type: string
                      example: invalidParameters
                    message:
                      type: string
                      example: There are invalid parameters in the request
                    type:
                      type: string
                      example: ERROR
                    params:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            example: username
                          message:
                            type: string
                            example: Must be a positive integer
                        required:
                          - name
                          - message
                  required:
                    - alias
                    - message
                    - type
            required:
              - message
          examples:
            Example of Bad Request:
              value:
                message:
                  - alias: invalidParameters
                    message: There are invalid parameters in the request
                    type: ERROR
                    params:
                      - name: clientId
                        message: Must be a positive integer
    401Unauthorized:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: array
                items:
                  type: object
                  properties:
                    alias:
                      type: string
                    message:
                      type: string
                    type:
                      type: string
                    params:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                          message:
                            type: string
            x-examples:
              Example 1:
                message:
                  - alias: InvalidParameters
                    message: string
                    type: ERROR
                    params:
                      - name: clientId
                        message: The OAuth access token has expired and needs to be refreshed uses an unsupported credential type.
          examples:
            example unathorized:
              value:
                message:
                  - alias: InvalidParameters
                    message: string
                    type: ERROR
                    params:
                      - name: clientId
                        message: The OAuth access token has expired and needs to be refreshed uses an unsupported credential type.
        application/xml:
          schema:
            type: object
            properties: {}
        multipart/form-data:
          schema:
            type: object
            properties: {}
    403Forbidden:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: array
                items:
                  type: object
                  properties:
                    alias:
                      type: string
                    message:
                      type: string
                    type:
                      type: string
                    params:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                          message:
                            type: string
            x-examples:
              Example 1:
                message:
                  - alias: InvalidParameters
                    message: string
                    type: ERROR
                    params:
                      - name: clientId
                        message: The current user does not have access to perform the requested action
          examples:
            Example Forbidden:
              value:
                message:
                  - alias: InvalidParameters
                    message: string
                    type: ERROR
                    params:
                      - name: clientId
                        message: The current user does not have access to perform the requested action
    404NotFound:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: array
                items:
                  type: object
                  properties:
                    alias:
                      type: string
                    message:
                      type: string
                    type:
                      type: string
                    params:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                          message:
                            type: string
            x-examples:
              Example 1:
                message:
                  - alias: InvalidParameters
                    message: string
                    type: ERROR
                    params:
                      - name: clientId
                        message: 'Either there is no API method associated with the URL path of the request, or the request refers to one or more resources that were not found.'
          examples:
            Example NotFound:
              value:
                message:
                  - alias: InvalidParameters
                    message: string
                    type: ERROR
                    params:
                      - name: clientId
                        message: 'Either there is no API method associated with the URL path of the request, or the request refers to one or more resources that were not found.'
    500InternalServerError:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: array
                items:
                  type: object
                  properties:
                    alias:
                      type: string
                    message:
                      type: string
                    type:
                      type: string
                    params:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                          message:
                            type: string
            x-examples:
              Example 1:
                message:
                  - alias: InvalidParameters
                    message: string
                    type: ERROR
                    params:
                      - name: clientId
                        message: We encountered an internal error. You should retry the request using truncated exponential backoff.
          examples:
            example-1:
              value:
                message:
                  - alias: InvalidParameters
                    message: string
                    type: ERROR
                    params:
                      - name: clientId
                        message: We encountered an internal error. You should retry the request using truncated exponential backoff.
  parameters:
    OffsetParam:
      name: OffsetParam
      in: query
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 10
      description: '10'
    SortBy:
      name: SortBy
      in: query
      schema:
        type: integer
      description: '2'
    LimitParam:
      name: LimitParam
      in: query
      schema:
        type: integer
        format: int32
        maximum: 100
        minimum: 0
        default: 10
      description: '100'
  examples: {}
