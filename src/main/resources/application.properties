spring.application.name=dxc-api-maven
spring.mvc.cors.allow-credentials=true
spring.mvc.cors.allowed-origins=*
spring.mvc.cors.allowed-methods=GET, POST, PUT, DELETE


# H2 DDBB

#https://www.baeldung.com/spring-boot-h2-database
#https://www.youtube.com/watch?v=9ME94z46fsU&ab_channel=CodeForgeYT


# Data Source config
#Saving in memory / DB_CLOSE_DELAY=-1 give us stable connection as long as JVM working
spring.datasource.url=jdbc:h2:mem:memDxc;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
#spring.datasource.url=jdbc:h2:file:/src/main/resources/dxc
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# JPA config
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create

# H2 Console access
spring.h2.console.enabled=true
spring.h2.console.path=/h2



#Explications

#spring.datasource.url: jdbc:h2:mem:[database-name] for In-memory database and jdbc:h2:file:[path/database-name] for disk-based database.
#spring.datasource.username & spring.datasource.password properties are the same as your database installation.
#Spring Boot uses Hibernate for JPA implementation, we configure H2Dialect for H2 Database
#spring.jpa.hibernate.ddl-auto is used for database initialization. We set the value to update value so that a table will be created in the database automatically corresponding to defined data model. Any change to the model will also trigger an update to the table. For production, this property should be validate.
#spring.h2.console.enabled=true tells the Spring to start H2 Database administration tool, and you can access this tool on the browser: http://localhost:8080/h2-console.
#spring.h2.console.path=/h2-ui is for H2 console?s url, so the default url http://localhost:8080/h2-console will change to http://localhost:8080/h2-ui.

#Save in storage spring.datasource.url=jdbc:h2:file:/data/demo
#spring.datasource.url=jdbc:h2:file:/src/main/resources/dxc